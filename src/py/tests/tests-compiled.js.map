{"version":3,"sources":["tests.js"],"names":[],"mappings":"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","file":"tests-compiled.js","sourcesContent":["/* globals QUnit: false, Gettext: false, EN_MESSAGES: false, JA_MESSAGES: false */\n'use strict';\n\nQUnit.test( 'test_en_js', function(assert) {\n    var g = new Gettext(EN_MESSAGES);\n    assert.equal(g.gettext('simple-string'), 'A simple string');\n    assert.equal(g.ngettext('singular-string', 'plural-string', 1), 'Singular form!');\n    assert.equal(g.ngettext('singular-string', 'plural-string', 2), 'Plural form!');\n});\n\nQUnit.test('test_ja_js', function (assert) {\n    var g = new Gettext(JA_MESSAGES);\n    assert.equal(g.gettext('simple-string'), '簡単なストリング');\n    assert.equal(g.ngettext('singular-string', 'plural-string', 1), '日本語には複数形がありません。');\n    assert.equal(g.ngettext('singular-string', 'plural-string', 2), '日本語には複数形がありません。');\n});\n\nQUnit.test( 'test_null_js', function(assert) {\n    var g = new Gettext();\n    assert.equal(g.gettext('simple-string'), 'simple-string');\n    assert.equal(g.ngettext('singular-string', 'plural-string', 1), 'singular-string');\n    assert.equal(g.ngettext('singular-string', 'plural-string', 2), 'plural-string');\n});\n\nQUnit.test('test_en_json', function(assert){\n    var done = assert.async();\n    Gettext.load('/locale/', 'en', 'messages').then(function(g){\n        assert.equal(g.gettext('simple-string'), 'A simple string');\n        assert.equal(g.ngettext('singular-string', 'plural-string', 1), 'Singular form!');\n        assert.equal(g.ngettext('singular-string', 'plural-string', 2), 'Plural form!');\n        done();\n    }, function(err){\n        assert.ok(false, err);\n        done();\n    });\n});\n\nQUnit.test('test_ja_json', function(assert){\n    var done = assert.async();\n    Gettext.load('/locale/', 'ja', 'messages').then(function(g){\n        assert.equal(g.gettext('simple-string'), '簡単なストリング');\n        assert.equal(g.ngettext('singular-string', 'plural-string', 1), '日本語には複数形がありません。');\n        assert.equal(g.ngettext('singular-string', 'plural-string', 2), '日本語には複数形がありません。');\n        done();\n    }, function(err){\n        assert.ok(false, err);\n        done();\n    });\n});\n"]}